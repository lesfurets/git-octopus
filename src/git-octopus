usage() {
cat <<EOF
usage: git octopus [options] [-p <pattern>]

    -n     leaves the repository back to HEAD
    -v     prints the version of git-octopus
    -p     select branches using specified pattern
EOF
exit
}

line_break(){
    echo "-----------------------------------------------------------"
}

# Save the current state of the repository in $triggeredBranch
triggeredBranch=$(git symbolic-ref --short HEAD 2> /dev/null) ||
    triggeredBranch=$(git rev-parse HEAD)

signalHandler(){
    echo
    line_break
    echo "Stoping..."
    echo "HEAD -> $triggeredBranch"
    git reset -q --hard
    git checkout -q $triggeredBranch
    git clean -d -f
    exit 1
}

doCommit=$(git config octopus.commit)
#Retrive patterns written in the conf
patterns=$(git config --get-all octopus.pattern)

while getopts "nhvp:" opt; do
  case "$opt" in
    h)
      usage
      ;;
    n)
      doCommit=false
      ;;
    p)
      patterns=$OPTARG
      ;;
    v)
      echo "1.1.1"
      exit 0
      ;;
    \?)
      exit 1
      ;;
  esac
done

[[ -z $(git status --porcelain) ]] || die "The repository has to be clean"

trap signalHandler SIGINT SIGQUIT

#Exit code 0 if nothing to merge
if [[ -z "$patterns" ]] ; then
    exit 0
fi

branches=$(git ls-remote . $patterns | cut -d $'\t' -f 2)

echo "Branches beeing merged :"
for branch in $branches ; do
    echo $'\t'$branch
done

line_break

mergeBases= sha1s= octopusMessage=
for branch in $branches
do
    sha1=$(git rev-parse --verify "$branch")
    sha1s="$sha1s $sha1"
    eval GITHEAD_$sha1='"$branch"'
    export GITHEAD_$sha1

    # merges bases are not used in the octopus stategy so we don't need to compute them
    # mergeBases="$mergeBases`git merge-base --all HEAD $branch` "

    octopusMessage+="$branch$LF"
done

merge-octopus-fork "$mergeBases" -- HEAD $sha1s

if [ $? -eq 0 ]
then
    if $doCommit ; then
        tree=$(git write-tree)
        head=$(git rev-parse --verify HEAD)
        commit=$(git commit-tree -p $head ${sha1s// / -p } -m "$octopusMessage" $tree)
        git update-ref HEAD $commit
    else
        git reset -q --hard
    fi
    line_break
    echo "OCTOPUS SUCCESS"
else
    # Octopus merge failed, starting to run the analysis sequence ...
    line_break
   
    git reset -q --hard HEAD

    echo "Testing merges one by one with $triggeredBranch..."
    echo

    tmpFile=

    # Will perform a simple merge from the current branch with each branches one by one.
    for branch in $branches
    do
        if [[ $(git rev-parse $branch) != $(git rev-parse $triggeredBranch) ]]
        then
            echo -n "merging $branch ... "

            # merge base is not used in the octopus strategy
            # mergeBase=$(git merge-base --all HEAD $branch)
            mergeBase=

            sha1=$(git rev-parse --verify "$branch")

            tmpFile=$(merge-octopus-fork "$mergeBase" -- HEAD $sha1 2>&1)

            if [ $? -eq 0 ]
            then
                echo "SUCCESS"
            else
                echo "FAILED"
                echo "$tmpFile"
                git diff
                conflicts+="$branch "
            fi
            git reset -q --hard
        fi
    done
    
    line_break

    if [ -z "$conflicts" ]; then
        echo "No conflicts found between $triggeredBranch and the rest of the branches"
    else
        echo "$triggeredBranch has conflicts with :"
        for branch in $conflicts
        do
            echo $'\t'$branch
        done
    fi

    echo "OCTOPUS FAILED"
    exit 1
fi
